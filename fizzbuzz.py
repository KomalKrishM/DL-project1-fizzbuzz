# -*- coding: utf-8 -*-
"""fizzbuzz.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Hb7KUQuy1tIF9a11KZBb2J74Ak-j1644
"""

list_1 = []
for i in range(1,101):
  output = ''
  if (i%3==0):
      output += 'fizz'
  if(i%5==0):
      output += 'buzz'
  if(output == ''):
      output = str(i)
  list_1.append(output) 
print(list_1)

import numpy as np

import torch
from torch.autograd import Variable

NUM_DIGITS = 10
NUM_HIDDEN = 10
BATCH_SIZE = 128

# Represent each input by an array of its binary digits.
def binary_encode(i, num_digits):
    return np.array([i >> d & 1 for d in range(num_digits)])

# One-hot encode the desired outputs: [number, "fizz", "buzz", "fizzbuzz"]
def fizz_buzz_encode(i):
    if   i % 15 == 0: return 3
    elif i % 5  == 0: return 2
    elif i % 3  == 0: return 1
    else:             return 0

def fizz_buzz_decode(i, prediction):
    return [str(i), "fizz", "buzz", "fizzbuzz"][prediction]
  


trX = torch.Tensor([binary_encode(i, NUM_DIGITS) for i in range(101, 2 ** NUM_DIGITS)])
trY = torch.LongTensor([fizz_buzz_encode(i) for i in range(101, 2 ** NUM_DIGITS)])

decay_rate = 0
# Define the model
model = torch.nn.Sequential(
    torch.nn.Linear(NUM_DIGITS, NUM_HIDDEN),
    torch.nn.ReLU(),
    torch.nn.Linear(NUM_HIDDEN, 4)
)
loss_fn = torch.nn.CrossEntropyLoss()
optimizer = torch.optim.SGD(model.parameters(), lr = 0.05,momentum = 0.8,weight_decay=decay_rate)


# Start training it
for epoch in range(1000):
    for start in range(0, len(trX), BATCH_SIZE):
        end = start + BATCH_SIZE
        batchX = trX[start:end]
        batchY = trY[start:end]
        decay_rate= 0.05/(epoch+1)

        y_pred = model(batchX)
        loss = loss_fn(y_pred, batchY)

        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

    # Find loss on training data
    loss = loss_fn(model(trX), trY).data
    print ('Epoch:', epoch, 'Loss:', loss)


# Output now
testX = torch.Tensor([binary_encode(i, NUM_DIGITS) for i in range(1, 101)])
testY = model(testX)
predictions = zip(range(1, 101), list(testY.max(1)[1].data.tolist()))
list_2 = []
for (i, x) in predictions: 
  print (fizz_buzz_decode(i, x) )
  list_2.append(fizz_buzz_decode(i, x))

import numpy as np
print(list_2)
print(list_1)
k= 0
for i in range(100):
  if(list_1[i] != list_2[i]):
    k = k+1
print(k)

print("Model's state_dict:")
for param_tensor in model.state_dict():
    print(param_tensor, "\t", model.state_dict()[param_tensor].size())

print("Optimizer's state_dict:")
for var_name in optimizer.state_dict():
    print(var_name, "\t", optimizer.state_dict()[var_name])

from google.colab import drive
drive.mount('/content/gdrive')

!ls /content/gdrive

model_save_name = 'classifier2.pt'
path = F"/content/gdrive/My Drive/{model_save_name}" 
torch.save(model.state_dict(), path)

